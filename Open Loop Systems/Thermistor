#include <msp430.h>

/*
 * main.c
 * Author: Ryan Baker
 * Date: 10/17/18
 */

float bitVoltage;
float voltsPerBit = 3.3 / 4096;
float Vo;

float Rs = 15000;
float Vi = 5;
float Rt;

float slope = -0.002794;
float intercept = 54.8924;
float temp;

char space = ' ';

int main(void)
{
   // disable watchdog timer
   WDTCTL = WDTPW + WDTHOLD;        // watchdog timer stopped by enabling bit 7 (WDTHOLD) and using
                                    // the password (WDTPW)

   // enable ADC input
   P6SEL = 0x01;                    // enable A/D channel inputs

   // Magic from TI
   ADC12CTL0 = ADC12ON+ADC12MSC+ADC12SHT0_8; // Turn on ADC12, extend sampling time to avoid overflow of results
   ADC12CTL1 = ADC12SHP+ADC12CONSEQ_3+ADC12DIV_7 ;       // Use sampling timer, repeated sequence
   ADC12MCTL0 = ADC12INCH_0;                 // ref+=AVcc, channel = A0
   ADC12IE = 0x01;                           // Enable ADC12IFG.1
   ADC12CTL0 |= ADC12ENC;                    // Enable conversions
   ADC12CTL0 |= ADC12SC;                     // Start convn - software trigger

   // enable UART input/output
   P4SEL |= BIT4 + BIT5;            // P4.4, P4.5 set to TXD, RXD

   // configure UART and set baud rate... (UCA1CTL1)/(UCA1BR0 + UCA1BR1 x 256) = baud rate
   UCA1CTL1 |= UCSSEL_2;            // set to use SMCLK (UCSSEL_2)
   UCA1BR0 = 104;                   // set to 104
   UCA1BR1 = 0;                     // set to 0
   UCA1MCTL = UCBRS_2;              // set modulation pattern to high on bit 1 & 5
   UCA1CTL1 &= ~UCSWRST;            // initialize USCI
   UCA1IE |= UCRXIE;                // enable USCI_A1 RX interrupt

   __bis_SR_register(LPM0_bits + GIE); // enter LPM0, enable interrupts
   __no_operation();                // for debugger
}

#pragma vector = ADC12_VECTOR
__interrupt void ADC12ISR (void)
{
  switch(__even_in_range(ADC12IV,34))
  {
  case  0: break;                           // Vector  0:  No interrupt
  case  2: break;                           // Vector  2:  ADC overflow
  case  4: break;                           // Vector  4:  ADC timing overflow
  case  6:                                  // Vector  6:  ADC12IFG0
    bitVoltage = ADC12MEM0;
    Vo = (bitVoltage * voltsPerBit);
    Rt = (Rs * Vo) / (Vi - Vo);
    temp = slope*Rt + intercept;
    UCA1TXBUF = (((int)(temp + 0.5))/10 + 48);
    __delay_cycles(1000);
    UCA1TXBUF = ( (temp + 0.5) - (int)((temp + 0.5)/10)*10 + 48);
    __delay_cycles(1000);
    UCA1TXBUF = space;
  case  8: break;                           // Vector  8:  ADC12IFG1
  case 10: break;                           // Vector 10:  ADC12IFG2
  case 12: break;                           // Vector 12:  ADC12IFG3
  case 14: break;                           // Vector 14:  ADC12IFG4
  case 16: break;                           // Vector 16:  ADC12IFG5
  case 18: break;                           // Vector 18:  ADC12IFG6
  case 20: break;                           // Vector 20:  ADC12IFG7
  case 22: break;                           // Vector 22:  ADC12IFG8
  case 24: break;                           // Vector 24:  ADC12IFG9
  case 26: break;                           // Vector 26:  ADC12IFG10
  case 28: break;                           // Vector 28:  ADC12IFG11
  case 30: break;                           // Vector 30:  ADC12IFG12
  case 32: break;                           // Vector 32:  ADC12IFG13
  case 34: break;                           // Vector 34:  ADC12IFG14
  default: break;
  }
}
